on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

name: Build and release

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Tau ${{ github.ref }}
          draft: false
          prerelease: false

  build-linux:
    runs-on: ubuntu-latest
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        go-version: [1.23.x]
        arch: [amd64, arm64]

    steps:
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize and update submodules
        run: git submodule init && git submodule update

      - name: Build for Linux
        run: |
          export GOOS=linux
          export GOARCH=${{ matrix.arch }}
          make && mv tau tau-linux-${{ matrix.arch }}

      - name: Upload Linux artifact to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./tau-linux-${{ matrix.arch }}
          asset_name: tau-linux-${{ matrix.arch }}
          asset_content_type: application/octet-stream

  build-windows:
    runs-on: ubuntu-latest
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        go-version: [1.23.x]
        arch: [amd64, arm64]

    steps:
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install MinGW
        run: |
          sudo apt-get update
          sudo apt-get install -y g++-mingw-w64

      - name: Initialize and update submodules
        run: git submodule init && git submodule update

      - name: Build for Windows
        run: |
          if [ "${{ matrix.arch }}" == "amd64" ]; then
            export CC=x86_64-w64-mingw32-gcc
          elif [ "${{ matrix.arch }}" == "arm64" ]; then
            export CC=aarch64-w64-mingw32-gcc
          else
            echo "Unsupported architecture"
            exit 1
          fi
          export GOOS=windows
          export GOARCH=${{ matrix.arch }}
          make windows && mv tau.exe tau-windows-${{ matrix.arch }}.exe

      - name: Upload Windows artifact to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./tau-windows-${{ matrix.arch }}.exe
          asset_name: tau-windows-${{ matrix.arch }}.exe
          asset_content_type: application/octet-stream

  build-macos:
    runs-on: macos-latest
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        go-version: [1.23.x]
        arch: [amd64, arm64]

    steps:
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Initialize and update submodules
        run: git submodule init && git submodule update
      - name: Install Dependencies
        run: brew install gcc@14 make automake libtool texinfo autoconf
      - name: Build for MacOS
        run: |
          export GOOS=darwin
          export GOARCH=${{ matrix.arch }}
          make CC=gcc-14 && mv tau tau-macos-${{ matrix.arch }}

      - name: Upload MacOS artifact to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./tau-macos-${{ matrix.arch }}
          asset_name: tau-macos-${{ matrix.arch }}
          asset_content_type: application/octet-stream
