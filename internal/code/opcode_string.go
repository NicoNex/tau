// Code generated by "stringer -type=Opcode"; DO NOT EDIT.

package code

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpHalt-0]
	_ = x[OpPop-1]
	_ = x[OpConstant-2]
	_ = x[OpTrue-3]
	_ = x[OpFalse-4]
	_ = x[OpNull-5]
	_ = x[OpList-6]
	_ = x[OpMap-7]
	_ = x[OpClosure-8]
	_ = x[OpCurrentClosure-9]
	_ = x[OpAdd-10]
	_ = x[OpSub-11]
	_ = x[OpMul-12]
	_ = x[OpDiv-13]
	_ = x[OpMod-14]
	_ = x[OpBwAnd-15]
	_ = x[OpBwOr-16]
	_ = x[OpBwXor-17]
	_ = x[OpBwNot-18]
	_ = x[OpBwLShift-19]
	_ = x[OpBwRShift-20]
	_ = x[OpAnd-21]
	_ = x[OpOr-22]
	_ = x[OpEqual-23]
	_ = x[OpNotEqual-24]
	_ = x[OpGreaterThan-25]
	_ = x[OpGreaterThanEqual-26]
	_ = x[OpMinus-27]
	_ = x[OpBang-28]
	_ = x[OpIndex-29]
	_ = x[OpCall-30]
	_ = x[OpConcurrentCall-31]
	_ = x[OpReturn-32]
	_ = x[OpReturnValue-33]
	_ = x[OpJump-34]
	_ = x[OpJumpNotTruthy-35]
	_ = x[OpDot-36]
	_ = x[OpDefine-37]
	_ = x[OpGetGlobal-38]
	_ = x[OpSetGlobal-39]
	_ = x[OpGetLocal-40]
	_ = x[OpSetLocal-41]
	_ = x[OpGetBuiltin-42]
	_ = x[OpGetFree-43]
	_ = x[OpLoadModule-44]
	_ = x[OpInterpolate-45]
}

const _Opcode_name = "OpHaltOpPopOpConstantOpTrueOpFalseOpNullOpListOpMapOpClosureOpCurrentClosureOpAddOpSubOpMulOpDivOpModOpBwAndOpBwOrOpBwXorOpBwNotOpBwLShiftOpBwRShiftOpAndOpOrOpEqualOpNotEqualOpGreaterThanOpGreaterThanEqualOpMinusOpBangOpIndexOpCallOpConcurrentCallOpReturnOpReturnValueOpJumpOpJumpNotTruthyOpDotOpDefineOpGetGlobalOpSetGlobalOpGetLocalOpSetLocalOpGetBuiltinOpGetFreeOpLoadModuleOpInterpolate"

var _Opcode_index = [...]uint16{0, 6, 11, 21, 27, 34, 40, 46, 51, 60, 76, 81, 86, 91, 96, 101, 108, 114, 121, 128, 138, 148, 153, 157, 164, 174, 187, 205, 212, 218, 225, 231, 247, 255, 268, 274, 289, 294, 302, 313, 324, 334, 344, 356, 365, 377, 390}

func (i Opcode) String() string {
	if i >= Opcode(len(_Opcode_index)-1) {
		return "Opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Opcode_name[_Opcode_index[i]:_Opcode_index[i+1]]
}
